!<arch>
0-isupper.c/    0           0     0     644     239       `
#include "main.h"
/**
*_isupper - function to verify if char is uppercase or not
*@c: character to be tested
*Return: returns 1 if uppercase , 0 if not
*/

int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);

	return (0);
}

0-memset.c/     0           0     0     644     331       `
#include "main.h"
/**
*_memset - The _memset() function
* first n bytes of the memory area
* pointed to by s with a constant byte b
*@s: target
*@b: our constant byte
*@n:number of byte
*Return: returns new value of target
*/

char *_memset(char *s, char b, unsigned int n)
{
	while (n)
	{
		s[n - 1] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     446       `
#include "main.h"

/**
 *_strcat - concatenates  the string pointed to by @src to
 * the end of the string pointed to by @dest
 *@dest: String that will be appended
 *@src: String to be concatenated upon
 *
 * Return: returns poiner to @dest
 */

char *_strcat(char *dest, char *src)
{

	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index]; index++)
		dest[dest_len++] = src[index];

	return (dest);
}
1-isdigit.c/    0           0     0     644     224       `
#include "main.h"
/**
*_isdigit - function to verify if char is a digit or not
*@c: tested character
*Return: returns 1 if uppercase, 0 if not
*/

int _isdigit(int c)
{
if ((c >= 48) && (c <= 57))
return (1);

return (0);
}
1-memcpy.c/     0           0     0     644     379       `
#include "main.h"

/**
*_memcpy - The _memcpy() function copies n bytes
* from memory src to memory dest
*@dest: where bytes are copied to
*@src: where bytes are copied from
*@n: number of bytes to be copied
*Return: returns a pointer to n
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     438       `
#include "main.h"

/**
 *_strncat - concatenate two strings and adds inpuued no of bytes
 *@dest: string to append
 *@src: string to be completed
 *@n: our integer params to compare index to
 *Return: 0 (success)
 */

char *_strncat(char *dest, char *src, int n)
{

	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];

	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
2-strchr.c/     0           0     0     644     408       `
#include "main.h"
#include <stdio.h>

/**
 * *_strchr - locates a char in a string
 * @s: string to search
 * @c: char to find
 *
 * Return: ointer to first occurrence of character
 * c in the string s, or NULL if character is not found
 */
char *_strchr(char *s, char c)
{
		int a;

		while (1)
		{
			a = *s++;
			if (a == c)
			{
				return (s - 1);
			}
			if (a == 0)
			{
				return (NULL);
			}
		}
}
2-strlen.c/     0           0     0     644     234       `
#include "main.h"

/**
 * _strlen - function that returns length of a string
 * @s: string to evaluate
 *
 * Return: length of the string
 */
int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     557       `
#include "main.h"

/**
 * _strncpy - Copies at most an inputted number
 *            of bytes from string src into dest.
 * @dest: buffer storing the string copy.
 * @src: source string.
 * @n: The max number of bytes to copied from src.
 *
 * Return: pointer to string dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int index = 0, src_len = 0;

	while (src[index++])
		src_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[index] = src[index];

	for (index = src_len; index < n; index++)
		dest[index] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     199       `
#include "main.h"

/**
*_islower - checks if a char is in lowercase
*@c: character to be verified
*Return: return 0 or 1
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);

return (0);
}

3-puts.c/       0           0     0     644     249       `
#include "main.h"

/**
 *_puts - function that prints a string
 * @str: string to be print
 *
 * Description: print a string
 * On success: return the no of char printed
 */

void _puts(char *str)
{
while (*str)
_putchar(*str++);

_putchar('\n');
}

3-strcmp.c/     0           0     0     644     501       `
#include "main.h"

/**
 * _strcmp - Compares pointers to two strings.
 * @s1: pointer to first string being compared.
 * @s2: pointer to second string being compared.
 *
 * Return: If str1 < str2, the negative difference of
 * the first unmatched characters.
 *         If s1 == s2, 0.
 *         If s1 > s2, the positive difference of
 *         the first unmatched characters.
 */
int _strcmp(char *s1, char *s2)
{
	while ((*s1 && *s2) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     563       `
#include "main.h"

/**
 * *_strspn - function gets the length of a prefix substring
 * @s: string to evaluate
 * @accept: string containing list of char to match in s
 *
 * Return: the number of bytes in the initial segment
 * of s which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, f, flag;

	f = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				f++;
				flag = 1;
			}
		}
		if (flag == 0)
		{
			return (f);
		}
	}

	return (0);
}

4-isalpha.c/    0           0     0     644     287       `
#include "main.h"

/**
 * _isalpha - checks for any alphabetic character
 * @c: takes in a char
 * Return: 1 if letter, lowercase, uppercase; 0 for otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     515       `
#include "main.h"
#include <stdio.h>

/**
 * *_strpbrk - function searches a string of any of set of bytes
 * @s: string to search
 * @accept: string that contains the bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}

5-strstr.c/     0           0     0     644     526       `
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - function that locates a substring
 * @haystack: string to search in
 * @needle: substring to look for
 *
 * Return: pointer to the beginning of the located substring
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     230       `
#include "main.h"

/**
 * _abs - function to print the absolute value of a number
 * @n: takes in an integer
 * Return: 1 if > 0, 0 if == 0, positive if negative
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);
	return (n);
}
9-strcpy.c/     0           0     0     644     494       `
#include "main.h"

/**
 * *_strcpy - function copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int denis, i;

	denis = 0;

	while (src[denis] != '\0')
	{
		denis++;
	}

	for (i = 0; i < denis; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     205       `
#include <unistd.h>
/**
 * _putchar - will write char c to stdout
 * @c: Char to be printed
 *
 * Return: success 1.
 * if error, -1 to be returned
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

